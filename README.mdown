
`package.js` is a package manager very very similar to [require.js].
I quite like *most* of the design decisions that went into it, but one
point I don't agree with is that modules are referred to using paths, 
which makes module *use* depends on which file contains the module
*definition*.

`package.js` on the other hand requires you to provide a package
name that is likely globally unique .. and is closer to the "goog.provide"
approach. Package names are therefore of the form `"from.top.to.bottom"`.
This is also compatible with the Java-like reverse-DNS package naming 
conventions.

Just like [require.js], `package` also lends itself to easy minification
using, say, the closure compiler.

[require.js]: http://requirejs.org/

## Using package.js ##

You can directly use `package` within a HTML file during development as shown
below. During deployment, you can use the builder to combine multiple packages
into a single file which you can then pass on to a minifier like the closure
compiler.

    <script src="https://raw.github.com/srikumarks/package.js/master/package.js"></script>
    <script>
        package.config({
            'org.molerat.underground.project': {url: 'http://molerat.org/underground/project.js'}
        });
        package('main', ['org.molerat.underground.project'], function (Project) {
            // Do something after the main package has loaded.
        });
    </script>

(Yes, you can load packages off URLs like that.) See the next section below for
info on how to deploy concatenated/minified packages.

### package(name, dependencies, definition) ###

This is the main form of package definition which specifies a package
by name, declares its dependencies in an array and provides a definition
function whose return value serves as the package object.

`name` is a full package name. The intention is to have globally unique
package names, so the "reverse DNS" style of Java is accepted, though
you can deviate from that. However, the name must be in the form of 
JS identifiers separated by a periods such as `com.anthill.worker`.
Hyphens are allowed in names as well.

`dependencies` is an array of names of packages that must be loaded before this
package's definition function can be called. Generally speaking, you need to
specify full package names for the dependencies, but if the dependency shares
the same parent package as the package being defined, it can be specified as a
"sibling" by starting its name with a "." and omitting the common prefix.  For
example, the following two are equivalent -

    package('com.anthill.fighter', ['com.anthill.worker'], function (Worker) {
        // .. do something ..
        return worker;
    });

    package('com.anthill.fighter', ['.worker'], function (Worker) {
        // .. do something ..
        return worker;
    });

One other handy feature when you use such relative package names is
that if the dependency has no configuration information that tells the system
where to load the package from, it will inherit this configuration from
that of the package being defined. This means that if the `fighter`
package above is being loaded from `theredone/foo-fighter.js`, then
the `worker` will be loaded from `theredone/worker.js`. This lets you have
a "main.js" package that lists every other sibling package as a dependency
and does pretty much nothing else. Listing this main package as a dependency
for another package will result in the whole package being loaded.

`definition` is either a value or a function. If the latter, it
is called and the return value of the function is used as the package value.
The function's arguments have a one-to-one correspondence with the
dependencies list -- the loaded dependencies are passed in as arguments
to a package's definition function.

    package('com.anthill.queen', ['.worker', '.fighter'], function (Worker, Fighter) {
        // .. do something ..
        return queen;
    });


**this**: Within the package definition function, `this` refers to the current
package object being defined, so you can also add exports by assigning
properties to `this`. If you don't have a `return` statement within the
definition function, or do a `return;` or a `return undefined;` then the value
that `this` held is kept as the package value. Otherwise the package object is
defined by the return value of the definition function. Doing it this way lets
you augment an already defined package by writing a definition function that
modifies `this`. Another reason to use `this` is that the
`ADVANCED_OPTIMIZATIONS` mode of the [google closure compiler] can eliminate
those exports that are not used by the application during the minification
phase.

[google closure compiler]: https://developers.google.com/closure/compiler/

> In contrast to [require.js], `package.js` doesn't mind you organizing your
> packages in whatever way you want. The mapping between the package names and
> file names is only provided as a convenience and the recommended way to use
> `package` is to setup any file related mappings externally.  Stuff needed to
> *build* a system shouldn't be mixed up with definitions of the system's
> components and descriptions of dependencies between them .. methinks.

#### Experimental "__listing__" feature ####

If a dependency name ends with an asterisk, like `"another.package.*"`, then
the special package named `"another.package.__listing__"` is checked.  That
"package" is expected to be an array of other sub-package names, all of which
will be included as dependencies of the package that refers to
"another.package.*" and the corresponding argument will be an object whose keys
are the sub-package names and whose values are the sub-packages' contents.

### Configuring load locations ###

A package's path is normally derived from its name if left unspecified
by substituting '/' for '.' just like the Java packaging scheme. So 
`"com.anthill.worker"` will be fetched from `"com/anthill/worker.js"`.
You can override this using `package.config` as follows -

    package.config({
        'com.anthill.worker': {path: 'worker2.js', alias: 'w2'},
        //...
    });

Notice that above we've also given an (optional) alias to that package
and we can from this point on refer to the package just using `'w2'`.

You can also directly fetch a package from a URL by specifying `url:` 
instead of `path:`. This works in node.js as well as in the browser.

You can also specify generic schemes for certain "domains" in the 
package name. For example, if you want to map all package names
of the form `com.anthill.XX.YY` to a URL like `http://anthill.com/packages/XX/YY.js`,
you can specify the configuration like below -

    package.config({
        'com.anthill.*': (function (parts) {
            // XX = parts[0]
            // YY = parts[1], for example.
            return {
                url: ('http://anthill.com/packages/' + parts.join('/') + '.js')
            };
        })
    });

### Forward delarations ###

When concatenating files for minification, you do not want the package
manager to automatically try to load dependencies. For such cases, you
can use `package.declare` to indicate that these packages will be
loaded without the help of the package manager.

    package.declare([
        'com.anthill.worker',
        'com.anthill.fighter',
        //...
    ]);

You place such a declare statement at the start of your collection of packages
and simply concat all the package definition files.  

I want to liberate source code from files and separating the mapping from
package to source from the definition of a package and its dependencies
is my little contribution to that.

### package(name, definition) ###

This is *exactly* the same as -
    
    package(name, [], definition)

### package(name) ###

Returns the currently loaded package of the given name. This is for use within
a package's definition function. If `"com.anthill.worker"` is a valid package
name, then there are related package names that you can access as well, such as
`"com.anthill.*"` and `"com.*"`. All of the following are equivalent -

    package("*").com.anthill.worker
    package("com.*").anthill.worker
    package("com.anthill.*").worker
    package("com.anthill.worker")


## Using build and configure ##

The loading facility in `package.js` is alright, but you never want to
actually deploy an application like that because the load times for
the various packages just add up. What you need to do is to concatenate
all the packages you need into a single file and minify it and ship
that instead. `configure` and `builder` are Node command-line programs that
help you do that.

If you run the programs without any arguments, they'll print out a
small usage hint.

### configure ###

    Usage: configure file1.js file2.js ... > build-config.js

Generates (to stdout) `package.config` declarations for all the packages
found in the given files. The order of the files is irrelevant and there can
be any number of packages defined in each file.

If you then use the resulting `build-config.js` file as the first file
you pass to `build.js`, then the builder will know where to find every
package it needs.

### build ###

    Usage: build [build-config.js] main.js > concatenated.js

`build` scans all packages in `main.js` and generates a single concatenated
output containing all the packages necessary to run the code in `main.js`,
including `main.js` itself. The resulting `concatenated.js` can be passed
to a minifier such as the closure compiler directly.

The contents of `concatenated.js` are independent of `package.js` and you
don't need to include `package.js` in your HTML file after you build your
application like this.
